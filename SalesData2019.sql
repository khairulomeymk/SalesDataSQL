USE SalesDataSqlProject

--A target market analysis is an assessment of how your product or service fits into a specific market and where it will gain the most

--Create temp table
--
--SALES 2019 DATA TOGETHER


CREATE TABLE SALES_2019 ( ORDER_ID FLOAT, PRODUCT NVARCHAR(255), QUANTITY_ORDERED FLOAT, PRICE_EACH FLOAT, ORDER_DATE DATETIME, PURCHASE_ADDRESS NVARCHAR(255))
INSERT INTO SALES_2019
SELECT * FROM January_2019$ AS JAN UNION
SELECT * FROM February_2019$ AS FEB UNION
SELECT * FROM March_2019$ AS MAR UNION
SELECT * FROM April2019$ AS APR UNION
SELECT * FROM May_2019$ AS MAY UNION
SELECT * FROM June_2019$ AS JUN UNION
SELECT * FROM July_2019$ AS JUL UNION
SELECT * FROM August2019$ AS AUG UNION
SELECT * FROM September_2019$ AS SEP UNION
SELECT * FROM October_2019$ AS OCT UNION
SELECT * FROM November_2019$ AS NOV UNION
SELECT * FROM December_2019$ AS DEC

SELECT * FROM SALES_2019

--SALES 2019 DATA TOGETHER
SELECT * FROM (SELECT * FROM January_2019$ AS JAN UNION
SELECT * FROM February_2019$ AS FEB UNION
SELECT * FROM March_2019$ AS MAR UNION
SELECT * FROM April2019$ AS APR UNION
SELECT * FROM May_2019$ AS MAY UNION
SELECT * FROM June_2019$ AS JUN UNION
SELECT * FROM July_2019$ AS JUL UNION
SELECT * FROM August2019$ AS AUG UNION
SELECT * FROM September_2019$ AS SEP UNION
SELECT * FROM October_2019$ AS OCT UNION
SELECT * FROM November_2019$ AS NOV UNION
SELECT * FROM December_2019$ AS DEC) AS SALES2019 WHERE [Order ID] IS NOT NULL

--What was the best Year for sales? How much was earned that Year?

SELECT SUM([Quantity Ordered]*[Price Each]) AS 'TOTAL YEARLY SALES'  FROM (SELECT * FROM January_2019$ AS JAN UNION
SELECT * FROM February_2019$ AS FEB UNION
SELECT * FROM March_2019$ AS MAR UNION
SELECT * FROM April2019$ AS APR UNION
SELECT * FROM May_2019$ AS MAY UNION
SELECT * FROM June_2019$ AS JUN UNION
SELECT * FROM July_2019$ AS JUL UNION
SELECT * FROM August2019$ AS AUG UNION
SELECT * FROM September_2019$ AS SEP UNION
SELECT * FROM October_2019$ AS OCT UNION
SELECT * FROM November_2019$ AS NOV UNION
SELECT * FROM December_2019$ AS DEC) AS SALES2019

-- OR 

SELECT SUM(convert(numeric, [Quantity_Ordered])*(convert(numeric,[Price_Each]))) AS 'TOTAL YEARY SALES'  FROM SALES_2019

--What was the best month for sales? How much was earned that month?

SELECT 'January' ,SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM January_2019$ AS JAN UNION
SELECT 'February' ,SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM February_2019$ AS FEB UNION
SELECT 'March', SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM March_2019$ AS MAR UNION
SELECT 'April', SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM April2019$ AS APR UNION
SELECT 'May', SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM May_2019$ AS MAY UNION
SELECT 'June',SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM June_2019$ AS JUN UNION
SELECT 'July', SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM July_2019$ AS JUL UNION
SELECT 'August', SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM August2019$ AS AUG UNION
SELECT 'September', SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM September_2019$ AS SEP UNION
SELECT 'October', SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM October_2019$ AS OCT UNION
SELECT 'November', SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM November_2019$ AS NOV UNION
SELECT 'December', SUM(convert(int, [Quantity Ordered])*(convert(int,[Price Each]))) FROM December_2019$ AS DEC

--or

SELECT MONTH(ORDER_DATE) AS 'MONTH' ,SUM(convert(int, [Quantity_Ordered])*(convert(int,[Price_Each]))) AS REVENUE 
FROM SALES_2019 
GROUP BY MONTH(ORDER_DATE)
ORDER BY REVENUE DESC

-- Trying to get the city and state

DROP TABLE IF EXISTS SALES_2019_ADDRESSUPDATED
CREATE TABLE SALES_2019_ADDRESSUPDATED ( ORDER_ID FLOAT, PRODUCT NVARCHAR(255), QUANTITY_ORDERED FLOAT, PRICE_EACH FLOAT, ORDER_DATE DATETIME, PURCHASE_ADDRESS NVARCHAR(255), CITY NVARCHAR(255), STATE NVARCHAR(255))
INSERT INTO SALES_2019_ADDRESSUPDATED
SELECT ORDER_ID, PRODUCT, QUANTITY_ORDERED, PRICE_EACH, ORDER_DATE, PURCHASE_ADDRESS,
(SUBSTRING(CAST(PURCHASE_ADDRESS AS NVARCHAR(255)), CHARINDEX(', ', PURCHASE_ADDRESS) + 2,
CHARINDEX(' ', PURCHASE_ADDRESS, CHARINDEX(', ', PURCHASE_ADDRESS) + 2) - CHARINDEX(', ', PURCHASE_ADDRESS) - 2)) AS CITY,
    SUBSTRING(PURCHASE_ADDRESS, LEN(PURCHASE_ADDRESS) - 8, 3) AS STATE
FROM SALES_2019
WHERE PURCHASE_ADDRESS IS NOT NULL

SELECT * FROM SALES_2019_ADDRESSUPDATED

--TOTAL REVENUE
DROP TABLE IF EXISTS TOTALREVENUE
CREATE TABLE TOTALREVENUE (REVENUE FLOAT)
INSERT INTO TOTALREVENUE 
SELECT SUM(convert(int, [Quantity_Ordered])*(convert(int,[Price_Each]))) AS TOTALREVENUE FROM SALES_2019

-- What City had the highest number of sales?

SELECT CITY, SUM(convert(int, [Quantity_Ordered])*(convert(int,[Price_Each]))) AS REVENUE,((SUM(QUANTITY_ORDERED*PRICE_EACH))/(SELECT * FROM TOTALREVENUE)*100)
FROM SALES_2019_ADDRESSUPDATED
GROUP BY CITY
ORDER BY REVENUE DESC

--What state had the highest number of sales?

SELECT STATE, SUM(convert(int, [Quantity_Ordered])*(convert(int,[Price_Each]))) AS REVENUE,((SUM(QUANTITY_ORDERED*PRICE_EACH))/(SELECT * FROM TOTALREVENUE)*100)
FROM SALES_2019_ADDRESSUPDATED
GROUP BY STATE
ORDER BY REVENUE DESC

--What time should we display adverstisement to maximize likelihood of customer's buying product?

SELECT DATEPART(HOUR, ORDER_DATE) AS HOURLYORDER, COUNT(*) AS COUNTOFORDER
FROM SALES_2019_ADDRESSUPDATED
GROUP BY DATEPART(HOUR, ORDER_DATE)
ORDER BY COUNTOFORDER DESC

--What product sold the most? Why do you think it sold the most?

SELECT PRODUCT, SUM(QUANTITY_ORDERED) AS TOTAL_ORDER
FROM SALES_2019_ADDRESSUPDATED
GROUP BY PRODUCT
ORDER BY TOTAL_ORDER DESC

--What products are most often sold together?

SELECT SALES_2019.PRODUCT AS PRODUCT_ONE, SALES_2019_ADDRESSUPDATED.PRODUCT AS PRODUCT_TWO, COUNT(*) AS TOTALORDER FROM SALES_2019 JOIN SALES_2019_ADDRESSUPDATED
ON SALES_2019.ORDER_ID = SALES_2019_ADDRESSUPDATED.ORDER_ID 
WHERE SALES_2019.PRODUCT < SALES_2019_ADDRESSUPDATED.PRODUCT
GROUP BY SALES_2019.PRODUCT, SALES_2019_ADDRESSUPDATED.PRODUCT
ORDER BY TOTALORDER DESC

--How much probability for next people will ordered USB-C Charging Cable?

SELECT PRODUCT = 'USB-C Charging Cable' , COUNT(QUANTITY_ORDERED), QUANTITY_ORDERED/(SUM(QUANTITY_ORDERED)) AS PROBABILITY
FROM SALES_2019_ADDRESSUPDATED
GROUP BY QUANTITY_ORDERED
ORDER BY QUANTITY_ORDERED


